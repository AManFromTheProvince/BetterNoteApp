{"version":3,"sources":["components/TopBar/TopBar.js","components/SelectType/SelectType.js","components/Tags/Tags.js","components/TagRow/TagRow.js","components/SmallNotes/SmallNotes.js","components/SmallNoteFeed/SmallNoteFeed.js","components/PreviewNote/PreviewOptions/PreviewOptions.js","components/PreviewNote/PreviewNote.js","components/AddNote/AddNote.js","components/StatusMessage/StatusMessage.js","components/PreviewChecklist/CheckItem/CheckItem.js","components/PreviewChecklist/CheckItemList/CheckItemList.js","components/PreviewChecklist/PreviewChecklist.js","App.js","serviceWorker.js","index.js"],"names":["TopBar","handleSearchClick","setState","searching","state","search","this","props","searchValue","className","onClick","type","placeholder","value","onChange","React","Component","SelectType","switchTab","noteTab","checklistTab","title","id","undefined","Tags","tag","style","editStatus","deleteTag","TagRow","map","i","key","SmallNotes","note","clickedNote","colorPalette","backgroundColor","color","bg","modified","tags","length","SmallNoteFeed","data","saveNote","PreviewOptions","openNote","onEditTag","deleteNote","colorList","changeColor","currentColor","name","Object","keys","toUpperCase","substr","PreviewNote","noteData","writeNote","saveTag","tagTyped","addTag","onKeyDown","content","AddNote","onAddEmptyNote","openAddNote","addEmptyNote","addEmptyChecklist","StatusMessage","message","success","CheckItem","checked","checkOff","writeChecklist","deleteChecklist","checkedStyle","border","uncheckedStyle","checkmarkStyle","borderColor","width","paddingTop","fontSize","fontWeight","marginLeft","disabled","event","CheckItemList","items","item","description","PreviewChecklist","addChecklist","App","categorizeNote","notes","filter","checklist","resultNotes","notesList","giveId","allNotes","Number","toString","getGlobalPosition","emptyNote","push","opened","JSON","parse","stringify","modifyingNote","editTag","emptyChecklist","findNote","index","findNoteType","updateNote","listNotes","date","Date","oldModifyingList","newModifyingList","openedNote","getFullYear","getMonth","getDate","getHours","getMinutes","fetch","method","headers","body","then","response","json","displayStatus","target","splice","tab","notesResult","openedChecklist","searchNote","result","toLowerCase","includes","statusMessage","displayStatusMessage","catch","err","console","log","setTimeout","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error"],"mappings":"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","file":"static/js/main.bfd810b3.chunk.js","sourcesContent":["import React from 'react';\nimport './TopBar.css';\n\nclass TopBar extends React.Component {\n    constructor(){\n        super()\n        this.state = {\n            searching: false\n        }\n    }\n\n    handleSearchClick = () => {\n        this.setState({\n            searching: !this.state.searching\n        })\n    }\n\n\n    render(){\n        const search = this.props.search\n        const searchValue = this.props.searchValue\n        return(\n            <div className = \"top-bar\">\n                <div className = \"bar-actions\">\n                    <h2>Notes</h2>\n                    <span \n                    className = \"material-icons search-icon\"\n                    onClick = {this.handleSearchClick}\n                    >{!this.state.searching ? \"search\" : \"clear\"}</span>\n                </div>\n\n                <div className = \"bar-full\">\n                    <input type = \"text\" \n                    placeholder = \"Search your notes by title\"\n                    value = {searchValue}\n                    onChange ={search}>\n                    </input>\n                   \n                </div>\n                {\n\n                    this.state.searching &&\n                    <div className = \"search-box\">\n                        <input type = \"text\" \n                        placeholder = \"Search your notes by title\"\n                        value = {searchValue}\n                        onChange ={search}>\n                        </input>\n                    </div>\n                }\n    \n            </div>\n        );\n    }\n}\n\nexport default TopBar;","import React from 'react';\nimport './SelectType.css';\n\nconst SelectType = ({switchTab, noteTab, checklistTab}) => {\n    return(\n        <div className = \"selection-tab\">\n            <h5 \n            title = \"notes\" \n            id = {noteTab ? \"active-tab\": undefined}\n            onClick = {switchTab}>\n            Notes\n            </h5>\n            <h5 \n            title = \"checklist\" \n            id = {checklistTab ? \"active-tab\": undefined}\n            onClick = {switchTab}>\n            Checklist\n            </h5>\n\n        </div>\n    )\n}\n\nexport default SelectType;","import React from 'react';\nimport './Tags.css'\n\n\nconst Tags = ({tag, style, editStatus, deleteTag, id}) => {\n    return(\n        <div \n        className = {editStatus ? \"tag delete-tag\" : \"tag\"} \n        style = {style}\n        onClick = {()=>\n            {\n                if (editStatus){\n                    deleteTag(id)\n                }\n            }\n        }>\n            <p>{tag}</p>\n        </div>  \n    );\n}\n\nexport default Tags;","import React from 'react';\nimport Tags from '../Tags/Tags';\nimport './TagRow.css';\n\n\nconst TagRow = ({tag, style, editStatus, deleteTag}) => {\n    return(\n        tag.map((tag,i)=>{\n            return <Tags key = {i} id = {i} style = {style} tag = {tag} editStatus = {editStatus} deleteTag = {deleteTag}></Tags>\n        })\n        \n    )\n}\n\nexport default TagRow;","import React from 'react';\nimport './SmallNotes.css';\nimport TagRow from '../TagRow/TagRow';\n\n\nconst SmallNotes = ({note, id, clickedNote, colorPalette}) => {\n        const style = {\n            backgroundColor : colorPalette[note.color].bg,\n            color : colorPalette[note.color].color\n        }\n\n        return(\n            <div className = \"div-notes\">\n                <div className = \"small-notes\" onClick = {()=>clickedNote(id)}>\n                    <span className = \"small-notes-thumbnails\" style = {style}>&nbsp;</span>\n                    <div className = \"details\">\n                        <p className = \"note-text-thumbnail\">{note.title}</p>\n                        <p className = \"note-text-italics-thumbnail\">Last modified on {note.modified}</p>\n                        <div className = \"tags-row\">\n                            {\n                                note.tags.length > 0 ?\n                                <TagRow tag = {note.tags} style = {style}></TagRow> :\n                                <p className = \"no-tags\">No tags found</p>\n                            }\n                        </div>\n                    </div>\n                </div>\n               \n            </div>\n        );\n}\n\nexport default SmallNotes;","import React from 'react';\nimport SmallNotes from '../SmallNotes/SmallNotes';\nimport './SmallNoteFeed.css';\n\n\nconst SmallNoteFeed = ({data, saveNote, clickedNote, colorPalette}) => {\n    return(\n        <div className = \"notes-feed\">\n            {\n            data.map((note, i)=>{\n                return <SmallNotes \n                key = {i} \n                note = {note} \n                id = {note.id}\n                saveNote = {saveNote}\n                colorPalette = {colorPalette} \n                clickedNote = {clickedNote}/>\n            })\n            }\n        </div>\n    )\n   \n}\n\nexport default SmallNoteFeed;","import React from 'react';\n\n\nconst PreviewOptions = ({openNote, onEditTag, style, editStatus, saveNote, deleteNote, colorList, changeColor, currentColor}) => {\n    return(\n            <div className = \"options\">\n                <span  className = \"material-icons\" onClick = {openNote}>\n                    clear\n                </span>\n                <div className = \"other-options\">\n                    <select name = \"color\" className = \"select-color\" value = {currentColor} onChange = {changeColor}\n                    style = {style}>\n                        {\n                            Object.keys(colorList).map((key, i)=>{\n                                return  <option \n                                value = {key}\n                                key = {i}\n                                >\n                                {key[0].toUpperCase() + key.substr(1)}\n                                </option>\n                            })\n                        }\n                    </select>\n\n\n\n                    <div className = \"edit-tag\" onClick = {onEditTag}>\n                        <button style = {style}> \n                            <span  \n                            className = \"material-icons edit-icon\" \n                            style = {{color: style.color}}>\n                            {editStatus ? \"clear\" : \"edit\"}\n                            </span>\n                            {editStatus ? \"Cancel\" : \"Edit tags\"}\n                        </button>\n                    </div>\n                    <span  className = \"material-icons\" onClick = {saveNote}>\n                        save\n                    </span>\n                    <span  className = \"material-icons\" \n                    onClick = {()=>{\n                            openNote(0)\n                            deleteNote()\n                        }\n                    }\n                    >\n                        delete\n                    </span>\n                </div>\n        </div>\n    )\n}\n\nexport default PreviewOptions;","import React from 'react';\nimport './PreviewNote.css';\nimport TagRow from '../TagRow/TagRow';\nimport PreviewOptions from './PreviewOptions/PreviewOptions';\n\nconst PreviewNote = ({noteData,style, openNote, saveNote, writeNote, deleteNote, onEditTag, editStatus, \n    saveTag, tagTyped, addTag, deleteTag, colorList, changeColor}) =>{\n    return(\n        <div className = \"bg-note\">\n            <div className = \"preview-note\" >\n                <PreviewOptions \n                openNote = {openNote}\n                saveNote = {saveNote}\n                deleteNote = {deleteNote}\n                onEditTag = {onEditTag}\n                style = {style}\n                editStatus ={editStatus}\n                colorList = {colorList}\n                currentColor = {noteData.color}\n                changeColor = {changeColor}/>\n                {\n                    editStatus &&\n                    <input \n                    type = \"text\"\n                    placeholder = \"Enter new tag here...\"  \n                    id = \"tag-input\"\n                    value = {tagTyped}\n                    onKeyDown={saveTag}\n                    onChange={addTag}></input>\n                }\n            \n                <div className = \"tags\">\n                    {\n                        noteData.tags.length > 0 ?\n                        <TagRow tag = {noteData.tags} style = {style} editStatus = {editStatus} deleteTag = {deleteTag}></TagRow> :\n                        <p className = \"no-tags\">No tags found</p>\n                    }\n                </div>   \n\n                <input \n                type = \"text\" \n                value = {noteData.title} \n                name = \"title\"\n                onChange = {writeNote}\n                placeholder = \"Title\"\n                />\n                    \n\n                <textarea \n                value = {noteData.content} \n                name = \"content\"\n                onChange = {writeNote}\n                id = {editStatus ? \"adjusted\" : undefined}\n                placeholder = \"Enter anything here....\"\n                ></textarea>\n                <p className = \"modified-preview\">Last modified on {noteData.modified}</p>\n            </div>\n        </div>\n    );\n}\n\nexport default PreviewNote;","import React from 'react';\nimport './AddNote.css'\n\nclass AddNote extends React.Component {\n\n    constructor(){\n        super()\n        this.state = {\n            openAddNote: false\n        }\n    }\n\n\n    onAddEmptyNote = () =>{\n        this.setState({openAddNote : !this.state.openAddNote})\n    }\n\n\n    render(){\n        const addEmptyNote = this.props.addEmptyNote;\n        const addEmptyChecklist = this.props.addEmptyChecklist\n        return(\n            <div className = \"add-note\">\n            \n            {\n            !this.state.openAddNote ?\n            <button className = \"add-button\" onClick = {this.onAddEmptyNote}>\n                <span className = \"material-icons add-icon\">add</span>\n                Add a note\n            </button>\n            :\n            <div className = \"add-options\">\n                <span className = \"material-icons\" onClick = {this.onAddEmptyNote}>clear</span>\n                <span className = \"material-icons\" onClick = {addEmptyNote}>description</span>\n                <span className = \"material-icons\" onClick = {addEmptyChecklist}>list</span>\n            </div>\n            } \n            </div>\n        )\n    }\n}\n\nexport default AddNote;","import React from 'react';\nimport './StatusMessage.css';\n\nconst StatusMessage = ({message, success}) => {\n\n    return(\n        <div className = {success ? \"status-message success-message open\" : \"status-message fail-message open\"}>\n            <span className = {success ? \"material-icons success\" : \"material-icons fail\"}>\n                {success ? \"check\" : \"cancel\"}\n            </span>\n            <p className = {success ? \"success\" : \"fail\"}>{message}</p>\n        </div>\n    )\n}\n\nexport default StatusMessage;","import React from 'react';\nimport './CheckItem.css'\n\nconst CheckItem = ({id, style, checked, content, checkOff, writeChecklist, deleteChecklist}) => {\n    const checkedStyle = {border: `3px solid ${style.backgroundColor}`, backgroundColor : style.backgroundColor}\n    const uncheckedStyle = {border: `3px solid ${style.backgroundColor}`}\n    const checkmarkStyle = {borderColor : style.color}\n    const inputStyle = {\n        width: \"85%\",\n        paddingTop: \"0.2em\",\n        fontSize: \"18px\",\n        fontWeight: \"200\",\n        marginLeft: \"1.4em\"\n    }\n    return(\n        <div className = \"check-item\">\n           \n            <div className = \"checkbox\" onClick = {()=>checkOff(id)}>\n                <div \n                className = {checked ? \"fake-checkbox checked\" : \"fake-checkbox\"} \n                style = {checked ? checkedStyle : uncheckedStyle}>\n                    <div \n                    className = {checked ? \"checkmark\" : undefined}\n                    style = {checked ? checkmarkStyle : undefined}>\n                    </div>\n                \n                </div>\n                \n            </div>\n            \n            <input \n            style = {inputStyle} \n            id = {checked ? \"checked-task\" :  \"unchecked-task\"}\n            disabled = {checked ? true : false} \n            value = {content}\n            onChange = {(event)=>writeChecklist(event, id)}/>\n            \n            <span \n            className = \"material-icons delete-notes\" \n            style={{color:style.color}}\n            onClick = {()=>deleteChecklist(id)}>clear</span>\n        </div>\n    )\n}\n\nexport default CheckItem;","import React from 'react';\nimport CheckItem from '../CheckItem/CheckItem';\nimport './CheckItemList.css'\n\nconst CheckItemList = ({checkOff, items, style, writeChecklist, deleteChecklist}) => {\n    return(\n        <div className = 'checklist-div'>\n        {\n            items.map((item, i)=>{\n                return <CheckItem \n                key = {i}\n                id = {i}\n                checked={item.checked} \n                content = {item.description}\n                checkOff = {checkOff}\n                writeChecklist = {writeChecklist}\n                deleteChecklist = {deleteChecklist}\n                style = {style}/>\n            })\n        }\n        </div>\n    )\n}\n\n\nexport default CheckItemList;","import React from 'react';\nimport PreviewOptions from '../PreviewNote/PreviewOptions/PreviewOptions';\nimport TagRow from '../TagRow/TagRow';\nimport CheckItemList from './CheckItemList/CheckItemList';\nimport './PreviewChecklist.css'\n\nconst PreviewChecklist = ({openNote, saveNote, deleteNote, onEditTag, style, editStatus, tagTyped, saveTag, addTag\n    ,noteData, deleteTag, checkOff, writeNote, writeChecklist, deleteChecklist,addChecklist, colorList, changeColor}) => {\n    return(\n        <div className = \"bg-note\">\n            <div className = \"preview-note\">\n                <PreviewOptions \n                    openNote = {openNote}\n                    saveNote = {saveNote}\n                    deleteNote = {deleteNote}\n                    onEditTag = {onEditTag}\n                    style = {style}\n                    editStatus ={editStatus}\n                    colorList = {colorList}\n                    currentColor = {noteData.color}\n                    changeColor = {changeColor}/>\n                {\n                    editStatus &&\n                    <input \n                    type = \"text\"\n                    placeholder = \"Enter new tag here...\"  \n                    id = \"tag-input\"\n                    value = {tagTyped}\n                    onKeyDown={saveTag}\n                    onChange={addTag}></input>\n                }\n\n                <div className = \"tags\">\n                {\n                    noteData.tags.length > 0 ?\n                    <TagRow tag = {noteData.tags} style = {style} editStatus = {editStatus} deleteTag = {deleteTag}></TagRow> :\n                    <p className = \"no-tags\">No tags found</p>\n                }\n                </div>\n                \n                <div className = \"title-checklist\">\n                    <input \n                    type = \"text\" \n                    value = {noteData.title} \n                    name = \"title\"\n                    onChange = {writeNote}\n                    placeholder = \"Title\"\n                    />\n                    <span \n                    className = \"material-icons\" \n                    style = {{color:style.color, backgroundColor: style.backgroundColor}}\n                    onClick = {addChecklist}>add</span>\n                </div>\n\n                <CheckItemList \n                checkOff ={checkOff} \n                items = {noteData.content} \n                style = {style}\n                writeChecklist = {writeChecklist}\n                deleteChecklist = {deleteChecklist}></CheckItemList>\n                \n                <p className = \"modified-preview\">Last modified on {noteData.modified}</p>\n            \n            </div>\n        </div>\n    )\n}\n\nexport default PreviewChecklist;","import React from 'react';\nimport './App.css';\nimport TopBar from './components/TopBar/TopBar';\nimport SelectType from './components/SelectType/SelectType';\nimport SmallNoteFeed from './components/SmallNoteFeed/SmallNoteFeed';\nimport PreviewNote from './components/PreviewNote/PreviewNote';\nimport AddNote from './components/AddNote/AddNote';\nimport StatusMessage from './components/StatusMessage/StatusMessage';\nimport PreviewChecklist from './components/PreviewChecklist/PreviewChecklist';\n\n\n\nconst colorPalette = {\n  \"red\" : {\"bg\" : \"#f0b5ba\", \"color\" : \"#d2202f\"},\n  \"blue\" : {\"bg\" : \"#b5d8f0\", \"color\" : \"#006fbe\"},\n  \"green\" : {\"bg\" : \"#d6f6d3\", \"color\" : \"#0d9f00\"},\n  \"yellow\" : {\"bg\" : \"rgba(255, 255, 0, 0.3)\", \"color\" : \"#b0a200\"},\n  \"purple\" : {\"bg\" : \"#c4a6ed\", \"color\" : \"#4c00b8\"}\n\n}\n\n\nclass App extends React.Component{\n  constructor(){\n    super()\n    this.state = {\n      notesList:[], //global list of all notes (both notes and checklists)\n      notes: [],  //list of notes that fall under category \"notes\" \n      checklist: [], //list of notes that fall under the category \"checklist\"\n      resultNotes: [], //list of notes that is used to show up on the UI\n      search: \"\",   //value of search bar\n      openNote : false, //indicates if we're opening a note/checklist\n      opened: {}, //holds the note we're currently viewing, use this if we're also editing\n      modifyingNote: 0, //index of the note with respect to its type. for example, index 0 for notes is different from index 0 for checklist\n      noteTab: true,    //note tab is the one we're viewing\n      checklistTab: false,  // checklist tab is the one we're viewing \n      editTag: false,   //we're currently editing tags\n      tagTyped: \"\",   //the tag currently typed by the user\n      statusMessage : \"\",   //status message is used to notify user\n      success : false,    //success of the operation done by the user\n      displayStatusMessage: false //handles whether status should appear or not\n    }\n  }\n\n  categorizeNote = (data, type) => {\n    const notes = data.filter(data=>{\n      return data.type === \"notes\"\n    })\n    const checklist = data.filter(data=>{\n      return data.type === \"checklist\"\n    })\n    if (type === \"notes\"){\n      this.setState({notes:notes, checklist : checklist, resultNotes:notes, notesList:data})\n    } else {\n      this.setState({notes:notes, checklist : checklist, resultNotes:checklist, notesList:data})\n    }\n  }\n\n  giveId = () => {\n    if (this.state.notesList.length === 1){\n        return \"1\"\n    } else {\n      let allNotes = this.state.notesList\n      return ( Number(allNotes[allNotes.length-1].id) + 1 ).toString()\n    }\n  }\n\n  getGlobalPosition = (id) =>{\n    let allNotes = this.state.notesList\n    for (let i = 1; i < allNotes.length; i++){\n      if (allNotes[i].id === id){\n        return i\n      }\n    }\n  }\n\n  componentDidMount(){\n    fetch(\"https://api.jsonbin.io/b/5e81c63f862c46101ac0aa32/latest\")\n    .then(response=>response.json())\n    .then((data)=>{\n      this.categorizeNote(data, \"notes\")\n      this.displayStatus(\"Finished loading data\", true)\n    })\n    .catch(err=>console.log(err))\n\n\n  }\n\n  addEmptyNote = () => {\n    let id = this.giveId()\n\n    let emptyNote = {\n      \"type\" : \"notes\",\n      \"id\" : id,\n      \"title\" : \"\",\n      \"content\" : \"\",\n      \"modified\" : \"\",\n      \"color\" : \"yellow\",\n      \"tags\" : []\n    }\n\n    let allNotes = this.state.notesList\n    let notes = this.state.notes\n    notes.push(emptyNote)\n    allNotes.push(emptyNote)\n\n    this.setState({notes: notes, notesList: allNotes, opened: JSON.parse(JSON.stringify(emptyNote)), \n      modifyingNote: notes.length-1, openNote : true, editTag : false,\n      noteTab: true, checklistTab: false, resultNotes: notes})\n    \n      // this.saveNote()\n  }\n\n  addEmptyChecklist = () => {\n    let id = this.giveId()\n\n    let emptyChecklist = {\n      \"type\" : \"checklist\",\n      \"id\" : id,\n      \"title\" : \"\",\n      \"content\" : [],\n      \"modified\" : \"\",\n      \"color\" : \"yellow\",\n      \"tags\" : []\n    }\n\n    let allNotes = this.state.notesList\n    let checklist = this.state.checklist\n    checklist.push(emptyChecklist)\n    allNotes.push(emptyChecklist)\n\n    this.setState({checklist: checklist, notesList: allNotes, opened: JSON.parse(JSON.stringify(emptyChecklist)), \n      modifyingNote: checklist.length-1, openNote : true, editTag : false,\n    noteTab: false, checklistTab: true, resultNotes: checklist})\n\n  }\n\n  displayStatus(message, success){\n    this.setState({statusMessage: message, success: success, displayStatusMessage: true})\n    setTimeout(()=>{\n      this.setState({statusMessage: \"\", success: false, displayStatusMessage: false})\n    }, 6000)\n  }\n\n  findNote = (id) => {  \n    for (let i = 0; i < this.state.notes.length; i++){\n      if (id === this.state.notes[i].id){\n        return {index: i, type : \"notes\"};\n      }\n    }\n\n    for (let i = 0; i < this.state.checklist.length; i++){\n      if (id === this.state.checklist[i].id){\n        return {index: i, type : \"checklist\"}\n      }\n    }\n    return {index: -1};\n  }\n\n  findNoteType = () => {\n    if (this.state.opened.type === \"notes\"){\n      return this.state.notes\n    } else {\n      return this.state.checklist\n    }\n  }\n\n  updateNote = (listNotes) => {\n    if (this.state.opened.type === \"notes\"){\n      this.setState({\n              notes: listNotes\n      })\n    } else {\n      this.setState({\n        checklist: listNotes\n      })\n    }\n  }\n\n  saveNote = () =>{\n    let date = new Date()\n    let listNotes = this.state.notesList\n    \n    let oldModifyingList = this.findNoteType()\n    let newModifyingList = this.findNoteType()\n    let openedNote = this.state.opened;\n    openedNote.modified = date.getFullYear() + \"-\" + (date.getMonth()+1) + \"-\" + date.getDate()+ \" \" + \n      (date.getHours()%12) + \":\" + date.getMinutes() + \" \" + (date.getHours() >= 12 ? \"PM\" : \"AM\")\n      //modify the date\n\n    listNotes[this.getGlobalPosition(this.state.opened.id)] = openedNote    //modify it in the overall list of notes\n    newModifyingList[this.state.modifyingNote] = openedNote //modify it in its specific category of notes\n    this.updateNote(newModifyingList)       //set state immediately to reflect changes.\n\n\n    fetch(\"https://api.jsonbin.io/b/5e81c63f862c46101ac0aa32/\", \n    {\n      method: \"PUT\",\n      headers: {\"Content-Type\" : \"application/json\"},\n      body: JSON.stringify(listNotes)\n    })\n    .then(response=>response.json())\n    .then(data=>{\n      if (data.success){\n        this.setState({opened: openedNote})\n        this.categorizeNote(listNotes, openedNote.type)\n        this.displayStatus(\"Successfully saved changes\", true)\n      } else {\n        this.displayStatus(\"Changes were not saved\", false)\n        this.updateNote(oldModifyingList)\n      }\n    })\n  }\n\n  writeNote = (event) => {\n    let modifyingNote = this.state.opened;\n    modifyingNote[event.target.name] = event.target.value;\n    this.setState({\n      opened: modifyingNote\n    })\n  }\n\n  deleteNote = () => {\n    let listNotes = this.state.notesList\n    listNotes.splice(this.getGlobalPosition(this.state.opened.id), 1) //delete in global list\n    let oldModifyingList = this.findNoteType()    \n    let newModifyingList = this.findNoteType()\n    newModifyingList.splice(this.state.modifyingNote, 1)  //delete in specific category\n    this.updateNote(newModifyingList)     //set state immediately\n    let tab;      //know which tab we were at\n    if (this.state.checklistTab){\n      tab = \"checklist\"\n    } else {\n      tab = \"notes\"\n    }\n    \n\n    fetch(\"https://api.jsonbin.io/b/5e81c63f862c46101ac0aa32/\", \n    {\n      method: \"PUT\",\n      headers: {\"Content-Type\" : \"application/json\"},\n      body: JSON.stringify(listNotes)\n    })\n    .then(response=>response.json())\n    .then(data=>{\n      if (data.success){\n        this.categorizeNote(listNotes, tab)\n        this.displayStatus(\"Successfully saved changes\", true)\n      } else {\n        this.displayStatus(\"Changes were not saved\", false)\n        this.updateNote(oldModifyingList)\n      }\n    })\n  }\n\n  clickedNote = (id) =>{\n    let notesResult = this.findNote(id)\n    if (notesResult.index === -1){\n      this.setState({\n        openNote : !this.state.openNote,\n        editTag : false\n      })\n    } else {\n      this.setState({\n        openNote: !this.state.openNote,\n        editTag : false,\n        modifyingNote: notesResult.index\n      })\n      if (notesResult.type === \"notes\"){\n        this.setState({\n          opened: JSON.parse(JSON.stringify(this.state.notes[notesResult.index])),\n        })\n      } else {\n        this.setState({\n          opened: JSON.parse(JSON.stringify(this.state.checklist[notesResult.index])),\n      })\n      }\n    }\n  }\n\n  switchTab = (event) => {\n    if (event.target.title === \"notes\"){\n      this.setState({noteTab : true, checklistTab : false, resultNotes: this.state.notes})\n    } else {\n      this.setState({noteTab: false, checklistTab : true, resultNotes: this.state.checklist})\n    }\n  }\n\n  onEditTag = () => {\n    this.setState({editTag: !this.state.editTag})\n  }\n\n  saveTag = (event) => {\n    if (event.key === \"Enter\" && this.state.tagTyped){\n      let modifyingNote = this.state.opened\n      modifyingNote.tags.push(event.target.value)\n      this.setState({opened:modifyingNote, tagTyped : \"\"})\n      this.displayStatus(\"Successfully added tag\", true)\n    }\n  }\n\n  addTag = (event) => {\n    this.setState({tagTyped: event.target.value})\n  }\n\n  deleteTag = (id) => {\n    let modifyingNote = this.state.opened\n    modifyingNote.tags.splice(id, 1)    \n    this.setState({opened: modifyingNote})\n    this.displayStatus(\"Successfully deleted tag\", true)\n  }\n\n  checkOff = (id) => {\n    let openedChecklist = this.state.opened;\n    openedChecklist.content[id].checked = !openedChecklist.content[id].checked\n    this.setState({opened: openedChecklist})  \n  }\n\n  writeChecklist = (event, id) => {\n    let modifyingNote = this.state.opened;\n    modifyingNote.content[id].description = event.target.value\n    this.setState({opened : modifyingNote})\n  }\n\n  deleteChecklist = (id) => {\n    let modifyingNote = this.state.opened;\n    modifyingNote.content.splice(id, 1)\n    this.setState({opened: modifyingNote})\n    this.displayStatus(\"Successfully deleted task\", true);\n  }\n\n  addChecklist = (event) => {\n    let modifyingNote = this.state.opened\n    modifyingNote.content.push({\"checked\" : false, \"description\" : \"\"})\n    this.setState({opened: modifyingNote})\n  }\n\n  changeColor = (event) => {\n    let modifyingNote = this.state.opened;\n    modifyingNote.color = event.target.value;\n    this.setState({\n      opened: modifyingNote\n    })\n  }\n\n  searchNote = (event) => {\n    this.setState({search: event.target.value})\n    if (event.target.value !== \"\"){\n      const result = this.state.notesList.filter((notes)=>{\n        return notes.title.toLowerCase().includes(event.target.value.toLowerCase())\n      })\n      this.setState({resultNotes: result})\n    } else {\n      if (this.state.noteTab){\n        this.setState({resultNotes: this.state.notes})\n      } else {\n        this.setState({resultNotes: this.state.checklist})\n      }\n\n    }\n   \n    \n  }\n\n  render(){\n    return(\n      <div className = \"app\">\n        <TopBar search = {this.searchNote} searchValue = {this.state.search}/>\n        \n        {\n        !this.state.search \n        ?\n        <SelectType\n        switchTab = {this.switchTab}\n        noteTab = {this.state.noteTab}\n        checklistTab = {this.state.checklistTab}\n        />\n        :\n        <div className = \"selection-tab\">\n          <h5>Results</h5>\n        </div>\n        }\n        {\n          this.state.resultNotes.length > 0 &&\n            <SmallNoteFeed \n            data = {this.state.resultNotes} \n            saveNote = {this.saveNote}\n            clickedNote = {this.clickedNote}\n            colorPalette = {colorPalette}\n            />\n        }\n\n        {\n          (this.state.openNote && this.state.opened.type === \"notes\" ) &&\n          <PreviewNote \n              noteData = {this.state.opened} \n              style = {{backgroundColor : colorPalette[this.state.opened.color].bg, \n                color: colorPalette[this.state.opened.color].color}} \n              openNote = {this.clickedNote} \n              saveNote = {this.saveNote}\n              writeNote = {this.writeNote}\n              deleteNote = {this.deleteNote}\n              onEditTag = {this.onEditTag}\n              editStatus = {this.state.editTag}\n              saveTag = {this.saveTag}\n              tagTyped = {this.state.tagTyped}\n              addTag = {this.addTag}\n              deleteTag = {this.deleteTag}\n              colorList = {colorPalette}\n              changeColor = {this.changeColor}\n          />\n        }\n        {\n          (this.state.openNote && this.state.opened.type === \"checklist\") &&\n          <PreviewChecklist\n          noteData = {this.state.opened} \n          style = {{backgroundColor : colorPalette[this.state.opened.color].bg, \n            color: colorPalette[this.state.opened.color].color}} \n          openNote = {this.clickedNote}\n          saveNote = {this.saveNote}\n          deleteNote = {this.deleteNote}\n          onEditTag = {this.onEditTag}\n          editStatus ={this.state.editTag}\n          tagTyped = {this.state.tagTyped} \n          saveTag = {this.saveTag} \n          addTag = {this.addTag}\n          deleteTag = {this.deleteTag}\n          checkOff = {this.checkOff}\n          writeNote = {this.writeNote}\n          writeChecklist = {this.writeChecklist}\n          deleteChecklist = {this.deleteChecklist}\n          addChecklist = {this.addChecklist}\n          colorList = {colorPalette}\n          changeColor = {this.changeColor}\n          />\n        }\n      {\n        !this.state.openNote &&\n        <AddNote addEmptyNote = {this.addEmptyNote} addEmptyChecklist = {this.addEmptyChecklist}></AddNote>\n      }\n      {\n        this.state.displayStatusMessage &&\n        <StatusMessage message = {this.state.statusMessage} success = {this.state.success}></StatusMessage>\n      }\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}